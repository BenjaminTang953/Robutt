'All lines are commented for Riley's benefit as Ben's coding is too stupid'
'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

'Fixed Values
motorArray[1] = "A" 'Front Left
motorArray[2] = "B" 'Front Right
motorArray[3] = "C" 'Back Left
motorArray[4] = "D" 'Back Right
moveSpeed = 30 'Moving Speed
sensorSpeed = 20 'Sensor Block Moving Speed
dropperSpeed = 20 'Dropper Moving Speed
dropperTime = 0.12 ' How Long The Dropper Moves For
fixedTurn = 320 'Turning distance, get past first wall
radius = 3 ' radius of wheel
distanceFudge = 0 'Fudge factor for moving foward
circumference = radius*2*Math.Pi ' Circumference of wheel
degreeDistance = circumference/360 ' Distance of one degree
fixedMove = (30/degreeDistance)+distanceFudge ' Degrees to move one tile
maxDist1 = 250 'Max Distance The Wall Should Be If It Is 1 Wall Away (Directly In Front)

'Readings in Code
distSide = 0 ' Distace of side wall for adjustments
distFront = 0 ' Distance of front wall for adjustments
averageDirectTemp = 0 'Average Temp Of Non Body Walls
leftDirectTemp = 0 'Temp Of Left Wall
rightDirectTemp = 0 'Temp Of Right Wall
frontDirectTemp = 0 'Temp of Front Wall
wallCounter = 0 ' counter of walls seen, for averag temp
pelletCounter = 10 'How Many Pellets Left
isVictim = "False" 'Does Camera See Victim
tempVariance = 10 'Range For Dead Or Alive Victim In Temp
lDist = 0 'Dist To Left Wall
rDist = 0 'Dist To Right Wall
fDist = 0 'Dist To Front Wall
moveDist = 0 'Distance Needed for Adjustment
lowestDist = 0 ' lowest distance from the wall
knownDistSide = 15.2 'How Far From Wall The Robot Should Be From Side
knownDistFront = 11.6 'How Far From Wall The Robot Should Be From Front
lWall1 = "True" 'Is There A Left Wall
rWall1 = "True" 'Is There A Right Wall
fWall1 = "True" 'Is There A Front Wall

Sub FourMotorsBreak
    For i = 1 to 4
        Motor.Stop(motorArray[i])
    EndFor
EndSub

Sub lWall1Check 'Checking For Left Wall
    If maxDist1 > lDist Then 'If The Dist To Left Wall Is Less Than The Extreme In 1 Tile
        lWall1 = "True" 'Then There Is Wall
    Else 'If Not
        lWall1 = "False" 'Then There Is No Wall
    EndIf
EndSub

Sub rWall1Check 'Same as left wall but for right wall
    If maxDist1 > rDist Then
        rWall1 = "True"
    Else
        rWall1 = "False"
    EndIf  
EndSub 

Sub fWall1Check 'Once again but for front wall
    If maxDist1 > fDist Then
        fWall1 = "True"
    Else
        fWall1 = "False"
    EndIf  
EndSub

Sub VictimCheck 'Can the camera see a victim either dead or alive
    If isVictim = "True" Then 'If it can
        Sound.PlayBellRing() 'Acknowledge the victim
        VictimOperation() 'Drop pellet thing
    EndIf
EndSub

Sub VictimOperation 'Dropping the pellet
    If averageDirectTemp - tempVariance <= leftDirectTemp <= averageDirectTemp + tempVariance or averageDirectTemp - tempVariance <= rightDirectTemp <= averageDirectTemp + tempVariance or averageDirectTemp - tempVariance <= frontDirectTemp <= averageDirectTemp + tempVariance Then 'If any of the 3 sides has an alive victim within a range of the average temp
        If pelletCounter > 0 Then
            DropperMove() 'Move the dropper
            pelletCounter = pelletCounter - 1 'Change the Counter
        Else
            Sound.PlayBellRing() 'Acknowledge dead x x victim
        EndIf
    EndIf
EndSub

Sub DropperMove 'Move the dropper thing
    Motor.Move("A", dropperSpeed, dropperTime, "True")
EndSub

Sub MotorMoveSync 'Move forwards, +neg = forward, -neg = back
  For i = 1 to 4
    If motorArray[i] = "C" Or motorArray[i] = "D" then
      Motor.Start(motorArray[i], -baseSpeed*neg)
    Else
      Motor.Start(motorArray[i], baseSpeed*neg)
    EndIf
  EndFor
EndSub

Sub MotorMoveSide 'Move left or right, +neg = right, -neg = left
  For i = 1 to 4
    If motorArray[i] = "B" Or motorArray[i] = "D" then
      Motor.Start(motorArray[i], -baseSpeed*neg)
    Else
      Motor.Start(motorArray[i], baseSpeed*neg)
    EndIf
  EndFor
EndSub

Sub MotorTurn 'No clue what this does Riley
  For i = 1 to 4
    If motorArray[i] = "A" Or motorArray[i] = "D" then
      Motor.Start(motorArray[i], -baseSpeed*neg)
    Else
      Motor.Start(motorArray[i], baseSpeed*neg)
    EndIf
  EndFor
EndSub

Sub RLAdjustment 'Adjustment by left and right wall
    If lDist > rDist Then
        While lDist > rDist
            neg = 1
            MotorMoveSide()
        EndWhile
        FourMotorsBreak()
    Else
        While lDist < rDist 
            neg = -1
            FourMotorMoveSide()
        EndWhile   
        4MotorsBreak
    EndIf
EndSub

Sub RAdjustment 'Adjustment off right wall
    moveDist = knownDistSide - rDist
    If rDist > knownDistSide Then
        neg = 1
    Else
        neg = -1
    EndIf
    While moveDist > 0 
        MotorMoveSide()
        moveDist = knownDistSide - rDist
    EndWhile
    FourMotorsBreak()
EndSub

Sub LAdjustment 'Adjustment off left wall
    moveDist = knownDistSide - lDist
    If lDist > knownDistSide Then
        neg = -1
    Else
        neg = 1
    EndIf
    While moveDist > 0 
        MotorMoveSide()
        moveDist = knownDistSide - lDist
    EndWhile
    FourMotorsBreak()
EndSub

Sub FAdjustment 'Adjustment off front wall
    moveDist = knownDistFront - fDist
    If fDist > knownDistFront Then
        neg = 1
    Else
        neg = -1
    EndIf
    While moveDist > 0
        MotorMoveSync()
        moveDist = knownDistFront - fDist
    EndWhile
    FourMotorsBreak()
EndSub  

Sub FrontMove
    Motor.ResetCount("A")
    neg = -1
    MotorMoveSync()
    While Motor.GetCount("A") <= fixedMove
    EndWhile
    FourMotorsBreak()
EndSub      


Sub RightWallFollow
    If rWall1 = "True" Then
        If lWall1 = "True" Then
            If fWall1 = "True" Then
                BackMove()
                FourMotorsBreak()
            Else
                RLAdjustment()
                FourMotorsBreak()
                FrontMove()
                FourMotorsBreak()
            EndIf
        Else
            If fWall1 = "True" Then
                RAdjustment()
                FourMotorsBreak()
                FAdjustment()
                FourMotorsBreak()
                LeftMove()
                FourMotorsBreak()
            Else
                RAdjustment()
                FourMotorsBreak()
                FrontMove()
                FourMotorsBreak()
            EndIf
        EndIf
    Else
        If lWall1 = "True" Then
            If fWall1 = "True" Then
                LAdjustment()
                FourMotorsBreak()
                FAdjustment()
                FourMotorsBreak()
                RightMove()
                FourMotorsBreak()
            Else
                LAdjustment()
                FourMotorsBreak()
                RightMove()
                FourMotorsBreak()
            EndIf
        Else
            If fWall1 = "True" Then
                FAdjustment()
                FourMotorsBreak()
                RightMove()
                FourMotorsBreak()
            Else
                RightMove()
                FourMotorsBreak()
            EndIf
        EndIf
    EndIf
EndSub

Sub LeftWallFollow 
    If lWall1 = "True" Then
        If rWall1 = "True" Then
            If fWall1 = "True" Then
                BackMove()
                FourMotorsBreak()
            Else
                RLAdjustment()
                FourMotorsBreak()
                FrontMove()
                FourMotorsBreak()
            EndIf
        Else
            If fWall1 = "True" Then
                LAdjustment()
                FourMotorsBreak()
                FAdjustment()
                FourMotorsBreak()
                RightMove()
                FourMotorsBreak()
            Else
                LAdjustment()
                FourMotorsBreak()
                FrontMove()
            EndIf
        EndIf
    Else
        If rWall1 = "True" Then
            If fWall1 = "True" Then
                RAdjustment()
                FourMotorsBreak()
                FAdjustment()
                LeftMove()
                FourMotorsBreak()
            Else
                RAdjustment()
                FourMotorsBreak()
                LeftMove()
                FourMotorsBreak()
            EndIf
        Else
            If fWall1 = "True" Then
                FAdjustment()
                FourMotorsBreak()
                LeftMove()
                FourMotorsBreak()
            Else
                LeftMove()
                FourMotorsBreak()
            EndIf
        EndIf
    EndIf
EndSub      
